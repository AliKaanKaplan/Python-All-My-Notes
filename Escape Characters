                                      Escape Characters ( Kaçış Karekterleri)

1- Satır Başı (\n)
Bu işaretin görevi bir alt satıra geçirmek.Satır başı karakterine ‘yeni satır karakteri’ dendiği de olur.

    Örneğin :>>> print("birinci satır\nikinci satır\nüçüncü satır") // Bu programın çıktısı aşağıdadır.
                birinci satır
                ikinci satır
                üçüncü satır

    Şimdi şu örneğe dikkatlice bakın:
    
Diyelim ki bilgisayarınızın ‘C:\’ dizinindeki ‘nisan’ adlı bir klasörün içinde yer alan masraflar.txt
adlı bir dosyayı yazdığınız bir program içinde kullanmanız gerekiyor. Mesela bu dosyayı, tam
adresiyle birlikte kullanıcılarınıza göstermek istiyorsunuz.

>>> print("C:\nisan\masraflar.txt") // Çıktısı aşağıdadır.
C:
isan\masraflar.txt

Gördüğümüz gibi kaçış olarak algılayıp bi alt satıra indi.Bunu çözmenin iki yolu var.
1.si
>>> open("C:\\nisan\\masraflar") // 1 ters taksim yerine 2 ters taksim kullanmak yada 
2.si
>>> open("C:/nisan/masraflar")  // düz taksim kullanmaktır.

2-Sekme (\t)
Burada \t adlı kaçış dizisi, “abc” ifadesinden sonra sanki Tab (sekme) tuşuna basılmış gibi bir
etki oluşturarak “def” ifadesini sağa doğru itiyor.

  Örneğin : >>> print("abc\tdef") // çıktısı aşağıdadır.
                abc def
                
            
            >>> print("C:\nisan\masraflar\toplam_masraf.txt") // bir önceki konuda yaşadığımız problemin aynısı.
                C:
                isan\masraflar  oplam_masraf.txt
                
            
            Yine aynı şekilde ya 2 ters taksim yada 1 düz taksim kullanarak bu problemi çözebiliriz.
            
3-Aynı Satır Başı (\r)
Bu kaçış dizisi, bir karakter dizisinde aynı satırın en başına dönülmesini sağlar. Bu kaçış
dizisinin işlevini tanımına bakarak anlamak biraz zor olabilir. O yüzden dilerseniz bu kaçış
dizisinin ne işe yaradığını bir örnek üzerinde göstermeye çalışalım.

Örneğin : >>> print("Merhaba\rDünya")
              Dünyaba
              
         >>> print("C:\ülke\türkiye\iller\rize\nüfus.txt")
              izeülke   ürkiye\iller
              üfus.txt

4-Düşey Sekme (\v)
   
   Eğer \ işaretini ‘v’ harfiyle birlikte kullanırsak düşey sekme denen şeyi elde ederiz.
   
     örneğin : >>> print("düşey\vsekme")
                   düşey
                        sekme
5-İmleç Kaydırma (\b)
\ kaçış dizisinin, biraraya geldiğinde özel bir anlam kazandığı bir başka harf de b’dir. \b kaçış
dizisinin görevi, imleci o anki konumundan sola kaydırmaktır. Bu tanım pek anlaşılır değil.O yüzden örnek göstereceğim.

    Örneğin : >>> print("yahoo.com\b.uk") // yandaki kodda görüldüğü gibi 1 karekter sola gidip yazmaya devam etti.
                  yahoo.co.uk
                  
              >>> print('istihza\b\b\bsn') // istihza kelimesini 3 sola kaydırarak sn kelimesini yazdık.
                  istisna 
                  
6-Küçük Unicode (\u)

UNICODE, karakterlerin, harflerin, sayıların ve bilgisayar ekranında gördüğümüz
öteki bütün işaretlerin her biri için tek ve benzersiz bir numaranın tanımlandığı bir sistemdir.
Bu sistemde, ‘kod konumu’ (code point ) adı verilen bu numaralar özel bir şekilde gösterilir.

 Örneğin : ‘İ’ harfi UNICODE sisteminde şu şekilde temsil edilir:
          >>> print("\u0130")
              İ
              
          >>> print("\u0070")
              p
              
  Dikkat edilecek tek unsur önceki örneklerde olduğu gibi herhangi bir yerin path'ini verirken yanlışıkla kaçış karekteri 
  yaratmamak.
  
7-Büyük Unicode (\U)

KÜçük unicode ile hemen hemen aynıdır. Ancak U ile gösterilen kod konumları u ile gösterilenlere göre biraz daha uzundur.

  Örneğin : >>>print("\U00000131") // çıktısı hemen altındadır.
               ı

Gördüğünüz gibi, burada \U kaçış dizisinden sonra gelen kısım toplam 8 haneli bir sayıdan
oluşuyor. u kaçış dizisinde ise bu kısmı toplam 4 haneli bir sayı olarak yazıyorduk. İşte \u
kaçış dizisi ile U kaçış dizisi arasındaki fark budur. u kaçış dizisi hakkında söylediğimiz öteki
her şey U kaçış dizisi için de geçerlidir.

8-Uzun Ad (\N)

UNICODE sistemi ile ilgili bir başka kaçış dizisi de \N adlı kaçış dizisidir.
UNICODE sisteminde her karakterin tek ve benzersiz bir kod konumu olduğu gibi, tek ve
benzersiz bir de uzun adı vardır. Örneğin ‘a’ harfinin UNICODE sistemindeki uzun adı şudur: LATIN SMALL LETTER A

Bir karakterin UNICODE sistemindeki uzun adını öğrenmek için unicodedata adlı bir
modülden yararlanabilirsiniz.

    örneğin: >>> import unicodedata  #  unicodedata modülünü ekler.
             >>> unicodedata.name('a') # a harfinin unicode karşılığını çağırır.
                LATIN SMALL LETTER A
             >>> unicodedata.name('Ş') # Ş harfinin unicode karşılığını çağırır.
                LATIN CAPITAL LETTER S WITH CEDILLA

Yukarıdaki örnekte görüldüğü gibi a harfinin karşılığını görebiliyoruz. Ayrıca tam tersinide {} parantezini kullanarak yaparız.

     örneğin: >>> print("\N{LATIN SMALL LETTER A}")
                  a
              >>> print("\N{LATIN CAPITAL LETTER S WITH CEDILLA}")
                  ş      
9-Onaltılı Karakter (\x)

‘x’ harfi de \ işareti ile birleştiğinde özel anlam kazanarak bir kaçış dizisi meydana getirir.
\x kaçış dizisini kullanarak, onaltılı (hexadecimal ) sayma sistemindeki bir sayının karakter
karşılığını gösterebilirsiniz.

    örneğin:>>> print("\x41")
                A
                 
Onaltılı sayma sistemindeki 41 sayısı ‘A’ harfine karşılık gelir. Eğer hangi karakterlerin
hangi sayılara karşılık geldiğini merak ediyorsanız http://www.ascii.cl/ adresindeki tabloyu
inceleyebilirsiniz. Bu tabloda ‘hex’ sütunu altında gösterilen sayılar onaltılı sayılar olup,
‘symbol’ sütununda gösterilen karakterlere karşılık gelirler. Örneğin ‘hex’ sütunundaki
4E sayısı ‘symbol’ sütunundaki ‘N’ harfine karşılık gelir.       

10-Etkisizleştirme (r)

Python’daki en temel kaçış dizisi \ işaretidir. Bu işaret bazı başka harflerle
birleşerek yeni kaçış dizileri de oluşturabilir.
Python’da \ işaretinin dışında temel bir kaçış dizisi daha bulunur. Bu kaçış dizisi ‘r’ harfidir.
Şimdi bu kaçış dizisinin nasıl kullanılacağını ve ne işe yaradığını inceleyelim:

Şöyle bir çıktı vermek istediğimizi düşünün:

Kurulum dizini: C:\aylar\nisan\toplam masraf

Bildiğimiz yoldan bu çıktıyı vermeye çalışırsak neler olacağını adınız gibi biliyorsunuz:

    örneğin:>>> print("Kurulum dizini: C:\aylar\nisan\toplam masraf")
                Kurulum dizini: C:ylar
                isan    oplam masraf
                
Python tabii ki, karakter dizisi içinde geçen ‘\aylar’, ‘\nisan’, ve ‘\toplam masraf’ ifadelerinin
ilk karakterlerini yanlış anladı! \a, \n ve \t gibi ifadeler Python’ın gözünde birer kaçış dizisi.
Dolayısıyla Python \a karakterlerini görünce bir !bip! sesi çıkarıyor, \n karakterlerini görünce
satır başına geçiyor ve \t karakterlerini görünce de Tab tuşuna basılmış gibi bir tepki veriyor.
Sonuç olarak da yukarıdaki gibi bir çıktı üretiyor. Bunu Etkisizleştirme komutunu kullanarak basit bir şekilde düzeltebiliriz.

    örnek:>>> print(r"Kurulum dizini: C:\aylar\nisan\toplam masraf") # r komutunu karekter dizisinin dışına yazdık.
                    Kurulum dizini: C:\aylar\nisan\toplam masraf
                    
11-Sayfa Başı (\f)

Bu komut bir sayfayı sonra erdirip bir sonraki sayfaya geçer ve oradan yazmaya devam eder.

    kullanımı: >>> f = open("deneme.txt", "w") # deneme.txt adında dosya oluşturur.
               >>> print("deneme\fdeneme", file=f) # deneme.txt dosyasına yazdırıyoruz. \f komutu ile 2.i deneme bir sonraki sayfaya yazar.
               >>> f.close() # deneme.txt dosyasını yazmaya kapatır.


                


                  
  
                       
